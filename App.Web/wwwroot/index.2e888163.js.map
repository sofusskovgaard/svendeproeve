{"mappings":"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","sources":["node_modules/jose/dist/browser/runtime/webcrypto.js","node_modules/jose/dist/browser/lib/buffer_utils.js","node_modules/jose/dist/browser/runtime/base64url.js","node_modules/jose/dist/browser/runtime/env.js","node_modules/jose/dist/browser/util/errors.js","node_modules/jose/dist/browser/runtime/subtle_dsa.js","node_modules/jose/dist/browser/runtime/check_key_length.js","node_modules/jose/dist/browser/lib/crypto_key.js","node_modules/jose/dist/browser/lib/invalid_key_input.js","node_modules/jose/dist/browser/runtime/is_key_like.js","node_modules/jose/dist/browser/runtime/get_sign_verify_key.js","node_modules/jose/dist/browser/runtime/verify.js","node_modules/jose/dist/browser/lib/is_disjoint.js","node_modules/jose/dist/browser/lib/is_object.js","node_modules/jose/dist/browser/lib/check_key_type.js","node_modules/jose/dist/browser/lib/validate_crit.js","node_modules/jose/dist/browser/lib/validate_algorithms.js","node_modules/jose/dist/browser/jws/flattened/verify.js","node_modules/jose/dist/browser/jws/compact/verify.js","node_modules/jose/dist/browser/lib/secs.js","node_modules/jose/dist/browser/lib/jwt_claims_set.js","node_modules/jose/dist/browser/lib/epoch.js","node_modules/jose/dist/browser/jwt/verify.js","node_modules/jose/dist/browser/runtime/jwk_to_key.js","node_modules/jose/dist/browser/key/import.js","script.js"],"sourcesContent":["export default crypto;\nexport const isCryptoKey = (key) => key instanceof CryptoKey;\n","import digest from '../runtime/digest.js';\nexport const encoder = new TextEncoder();\nexport const decoder = new TextDecoder();\nconst MAX_INT32 = 2 ** 32;\nexport function concat(...buffers) {\n    const size = buffers.reduce((acc, { length }) => acc + length, 0);\n    const buf = new Uint8Array(size);\n    let i = 0;\n    buffers.forEach((buffer) => {\n        buf.set(buffer, i);\n        i += buffer.length;\n    });\n    return buf;\n}\nexport function p2s(alg, p2sInput) {\n    return concat(encoder.encode(alg), new Uint8Array([0]), p2sInput);\n}\nfunction writeUInt32BE(buf, value, offset) {\n    if (value < 0 || value >= MAX_INT32) {\n        throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);\n    }\n    buf.set([value >>> 24, value >>> 16, value >>> 8, value & 0xff], offset);\n}\nexport function uint64be(value) {\n    const high = Math.floor(value / MAX_INT32);\n    const low = value % MAX_INT32;\n    const buf = new Uint8Array(8);\n    writeUInt32BE(buf, high, 0);\n    writeUInt32BE(buf, low, 4);\n    return buf;\n}\nexport function uint32be(value) {\n    const buf = new Uint8Array(4);\n    writeUInt32BE(buf, value);\n    return buf;\n}\nexport function lengthAndInput(input) {\n    return concat(uint32be(input.length), input);\n}\nexport async function concatKdf(secret, bits, value) {\n    const iterations = Math.ceil((bits >> 3) / 32);\n    const res = new Uint8Array(iterations * 32);\n    for (let iter = 0; iter < iterations; iter++) {\n        const buf = new Uint8Array(4 + secret.length + value.length);\n        buf.set(uint32be(iter + 1));\n        buf.set(secret, 4);\n        buf.set(value, 4 + secret.length);\n        res.set(await digest('sha256', buf), iter * 32);\n    }\n    return res.slice(0, bits >> 3);\n}\n","import { encoder, decoder } from '../lib/buffer_utils.js';\nexport const encodeBase64 = (input) => {\n    let unencoded = input;\n    if (typeof unencoded === 'string') {\n        unencoded = encoder.encode(unencoded);\n    }\n    const CHUNK_SIZE = 0x8000;\n    const arr = [];\n    for (let i = 0; i < unencoded.length; i += CHUNK_SIZE) {\n        arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));\n    }\n    return btoa(arr.join(''));\n};\nexport const encode = (input) => {\n    return encodeBase64(input).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n};\nexport const decodeBase64 = (encoded) => {\n    const binary = atob(encoded);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n};\nexport const decode = (input) => {\n    let encoded = input;\n    if (encoded instanceof Uint8Array) {\n        encoded = decoder.decode(encoded);\n    }\n    encoded = encoded.replace(/-/g, '+').replace(/_/g, '/').replace(/\\s/g, '');\n    try {\n        return decodeBase64(encoded);\n    }\n    catch (_a) {\n        throw new TypeError('The input to be decoded is not correctly encoded.');\n    }\n};\n","export function isCloudflareWorkers() {\n    return (typeof WebSocketPair !== 'undefined' ||\n        (typeof navigator !== 'undefined' && navigator.userAgent === 'Cloudflare-Workers') ||\n        (typeof EdgeRuntime !== 'undefined' && EdgeRuntime === 'vercel'));\n}\n","export class JOSEError extends Error {\n    static get code() {\n        return 'ERR_JOSE_GENERIC';\n    }\n    constructor(message) {\n        var _a;\n        super(message);\n        this.code = 'ERR_JOSE_GENERIC';\n        this.name = this.constructor.name;\n        (_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(Error, this, this.constructor);\n    }\n}\nexport class JWTClaimValidationFailed extends JOSEError {\n    static get code() {\n        return 'ERR_JWT_CLAIM_VALIDATION_FAILED';\n    }\n    constructor(message, claim = 'unspecified', reason = 'unspecified') {\n        super(message);\n        this.code = 'ERR_JWT_CLAIM_VALIDATION_FAILED';\n        this.claim = claim;\n        this.reason = reason;\n    }\n}\nexport class JWTExpired extends JOSEError {\n    static get code() {\n        return 'ERR_JWT_EXPIRED';\n    }\n    constructor(message, claim = 'unspecified', reason = 'unspecified') {\n        super(message);\n        this.code = 'ERR_JWT_EXPIRED';\n        this.claim = claim;\n        this.reason = reason;\n    }\n}\nexport class JOSEAlgNotAllowed extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JOSE_ALG_NOT_ALLOWED';\n    }\n    static get code() {\n        return 'ERR_JOSE_ALG_NOT_ALLOWED';\n    }\n}\nexport class JOSENotSupported extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JOSE_NOT_SUPPORTED';\n    }\n    static get code() {\n        return 'ERR_JOSE_NOT_SUPPORTED';\n    }\n}\nexport class JWEDecryptionFailed extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWE_DECRYPTION_FAILED';\n        this.message = 'decryption operation failed';\n    }\n    static get code() {\n        return 'ERR_JWE_DECRYPTION_FAILED';\n    }\n}\nexport class JWEInvalid extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWE_INVALID';\n    }\n    static get code() {\n        return 'ERR_JWE_INVALID';\n    }\n}\nexport class JWSInvalid extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWS_INVALID';\n    }\n    static get code() {\n        return 'ERR_JWS_INVALID';\n    }\n}\nexport class JWTInvalid extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWT_INVALID';\n    }\n    static get code() {\n        return 'ERR_JWT_INVALID';\n    }\n}\nexport class JWKInvalid extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWK_INVALID';\n    }\n    static get code() {\n        return 'ERR_JWK_INVALID';\n    }\n}\nexport class JWKSInvalid extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWKS_INVALID';\n    }\n    static get code() {\n        return 'ERR_JWKS_INVALID';\n    }\n}\nexport class JWKSNoMatchingKey extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWKS_NO_MATCHING_KEY';\n        this.message = 'no applicable key found in the JSON Web Key Set';\n    }\n    static get code() {\n        return 'ERR_JWKS_NO_MATCHING_KEY';\n    }\n}\nexport class JWKSMultipleMatchingKeys extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';\n        this.message = 'multiple matching keys found in the JSON Web Key Set';\n    }\n    static get code() {\n        return 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';\n    }\n}\nSymbol.asyncIterator;\nexport class JWKSTimeout extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWKS_TIMEOUT';\n        this.message = 'request timed out';\n    }\n    static get code() {\n        return 'ERR_JWKS_TIMEOUT';\n    }\n}\nexport class JWSSignatureVerificationFailed extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';\n        this.message = 'signature verification failed';\n    }\n    static get code() {\n        return 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';\n    }\n}\n","import { isCloudflareWorkers } from './env.js';\nimport { JOSENotSupported } from '../util/errors.js';\nexport default function subtleDsa(alg, algorithm) {\n    const hash = `SHA-${alg.slice(-3)}`;\n    switch (alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512':\n            return { hash, name: 'HMAC' };\n        case 'PS256':\n        case 'PS384':\n        case 'PS512':\n            return { hash, name: 'RSA-PSS', saltLength: alg.slice(-3) >> 3 };\n        case 'RS256':\n        case 'RS384':\n        case 'RS512':\n            return { hash, name: 'RSASSA-PKCS1-v1_5' };\n        case 'ES256':\n        case 'ES384':\n        case 'ES512':\n            return { hash, name: 'ECDSA', namedCurve: algorithm.namedCurve };\n        case 'EdDSA':\n            if (isCloudflareWorkers() && algorithm.name === 'NODE-ED25519') {\n                return { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };\n            }\n            return { name: algorithm.name };\n        default:\n            throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n    }\n}\n","export default (alg, key) => {\n    if (alg.startsWith('RS') || alg.startsWith('PS')) {\n        const { modulusLength } = key.algorithm;\n        if (typeof modulusLength !== 'number' || modulusLength < 2048) {\n            throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);\n        }\n    }\n};\n","import { isCloudflareWorkers } from '../runtime/env.js';\nfunction unusable(name, prop = 'algorithm.name') {\n    return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);\n}\nfunction isAlgorithm(algorithm, name) {\n    return algorithm.name === name;\n}\nfunction getHashLength(hash) {\n    return parseInt(hash.name.slice(4), 10);\n}\nfunction getNamedCurve(alg) {\n    switch (alg) {\n        case 'ES256':\n            return 'P-256';\n        case 'ES384':\n            return 'P-384';\n        case 'ES512':\n            return 'P-521';\n        default:\n            throw new Error('unreachable');\n    }\n}\nfunction checkUsage(key, usages) {\n    if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {\n        let msg = 'CryptoKey does not support this operation, its usages must include ';\n        if (usages.length > 2) {\n            const last = usages.pop();\n            msg += `one of ${usages.join(', ')}, or ${last}.`;\n        }\n        else if (usages.length === 2) {\n            msg += `one of ${usages[0]} or ${usages[1]}.`;\n        }\n        else {\n            msg += `${usages[0]}.`;\n        }\n        throw new TypeError(msg);\n    }\n}\nexport function checkSigCryptoKey(key, alg, ...usages) {\n    switch (alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512': {\n            if (!isAlgorithm(key.algorithm, 'HMAC'))\n                throw unusable('HMAC');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case 'RS256':\n        case 'RS384':\n        case 'RS512': {\n            if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5'))\n                throw unusable('RSASSA-PKCS1-v1_5');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case 'PS256':\n        case 'PS384':\n        case 'PS512': {\n            if (!isAlgorithm(key.algorithm, 'RSA-PSS'))\n                throw unusable('RSA-PSS');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case 'EdDSA': {\n            if (key.algorithm.name !== 'Ed25519' && key.algorithm.name !== 'Ed448') {\n                if (isCloudflareWorkers()) {\n                    if (isAlgorithm(key.algorithm, 'NODE-ED25519'))\n                        break;\n                    throw unusable('Ed25519, Ed448, or NODE-ED25519');\n                }\n                throw unusable('Ed25519 or Ed448');\n            }\n            break;\n        }\n        case 'ES256':\n        case 'ES384':\n        case 'ES512': {\n            if (!isAlgorithm(key.algorithm, 'ECDSA'))\n                throw unusable('ECDSA');\n            const expected = getNamedCurve(alg);\n            const actual = key.algorithm.namedCurve;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.namedCurve');\n            break;\n        }\n        default:\n            throw new TypeError('CryptoKey does not support this operation');\n    }\n    checkUsage(key, usages);\n}\nexport function checkEncCryptoKey(key, alg, ...usages) {\n    switch (alg) {\n        case 'A128GCM':\n        case 'A192GCM':\n        case 'A256GCM': {\n            if (!isAlgorithm(key.algorithm, 'AES-GCM'))\n                throw unusable('AES-GCM');\n            const expected = parseInt(alg.slice(1, 4), 10);\n            const actual = key.algorithm.length;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.length');\n            break;\n        }\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW': {\n            if (!isAlgorithm(key.algorithm, 'AES-KW'))\n                throw unusable('AES-KW');\n            const expected = parseInt(alg.slice(1, 4), 10);\n            const actual = key.algorithm.length;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.length');\n            break;\n        }\n        case 'ECDH': {\n            switch (key.algorithm.name) {\n                case 'ECDH':\n                case 'X25519':\n                case 'X448':\n                    break;\n                default:\n                    throw unusable('ECDH, X25519, or X448');\n            }\n            break;\n        }\n        case 'PBES2-HS256+A128KW':\n        case 'PBES2-HS384+A192KW':\n        case 'PBES2-HS512+A256KW':\n            if (!isAlgorithm(key.algorithm, 'PBKDF2'))\n                throw unusable('PBKDF2');\n            break;\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512': {\n            if (!isAlgorithm(key.algorithm, 'RSA-OAEP'))\n                throw unusable('RSA-OAEP');\n            const expected = parseInt(alg.slice(9), 10) || 1;\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        default:\n            throw new TypeError('CryptoKey does not support this operation');\n    }\n    checkUsage(key, usages);\n}\n","function message(msg, actual, ...types) {\n    if (types.length > 2) {\n        const last = types.pop();\n        msg += `one of type ${types.join(', ')}, or ${last}.`;\n    }\n    else if (types.length === 2) {\n        msg += `one of type ${types[0]} or ${types[1]}.`;\n    }\n    else {\n        msg += `of type ${types[0]}.`;\n    }\n    if (actual == null) {\n        msg += ` Received ${actual}`;\n    }\n    else if (typeof actual === 'function' && actual.name) {\n        msg += ` Received function ${actual.name}`;\n    }\n    else if (typeof actual === 'object' && actual != null) {\n        if (actual.constructor && actual.constructor.name) {\n            msg += ` Received an instance of ${actual.constructor.name}`;\n        }\n    }\n    return msg;\n}\nexport default (actual, ...types) => {\n    return message('Key must be ', actual, ...types);\n};\nexport function withAlg(alg, actual, ...types) {\n    return message(`Key for the ${alg} algorithm must be `, actual, ...types);\n}\n","import { isCryptoKey } from './webcrypto.js';\nexport default (key) => {\n    return isCryptoKey(key);\n};\nexport const types = ['CryptoKey'];\n","import crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkSigCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nexport default function getCryptoKey(alg, key, usage) {\n    if (isCryptoKey(key)) {\n        checkSigCryptoKey(key, alg, usage);\n        return key;\n    }\n    if (key instanceof Uint8Array) {\n        if (!alg.startsWith('HS')) {\n            throw new TypeError(invalidKeyInput(key, ...types));\n        }\n        return crypto.subtle.importKey('raw', key, { hash: `SHA-${alg.slice(-3)}`, name: 'HMAC' }, false, [usage]);\n    }\n    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n}\n","import subtleAlgorithm from './subtle_dsa.js';\nimport crypto from './webcrypto.js';\nimport checkKeyLength from './check_key_length.js';\nimport getVerifyKey from './get_sign_verify_key.js';\nconst verify = async (alg, key, signature, data) => {\n    const cryptoKey = await getVerifyKey(alg, key, 'verify');\n    checkKeyLength(alg, cryptoKey);\n    const algorithm = subtleAlgorithm(alg, cryptoKey.algorithm);\n    try {\n        return await crypto.subtle.verify(algorithm, cryptoKey, signature, data);\n    }\n    catch (_a) {\n        return false;\n    }\n};\nexport default verify;\n","const isDisjoint = (...headers) => {\n    const sources = headers.filter(Boolean);\n    if (sources.length === 0 || sources.length === 1) {\n        return true;\n    }\n    let acc;\n    for (const header of sources) {\n        const parameters = Object.keys(header);\n        if (!acc || acc.size === 0) {\n            acc = new Set(parameters);\n            continue;\n        }\n        for (const parameter of parameters) {\n            if (acc.has(parameter)) {\n                return false;\n            }\n            acc.add(parameter);\n        }\n    }\n    return true;\n};\nexport default isDisjoint;\n","function isObjectLike(value) {\n    return typeof value === 'object' && value !== null;\n}\nexport default function isObject(input) {\n    if (!isObjectLike(input) || Object.prototype.toString.call(input) !== '[object Object]') {\n        return false;\n    }\n    if (Object.getPrototypeOf(input) === null) {\n        return true;\n    }\n    let proto = input;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(input) === proto;\n}\n","import { withAlg as invalidKeyInput } from './invalid_key_input.js';\nimport isKeyLike, { types } from '../runtime/is_key_like.js';\nconst symmetricTypeCheck = (alg, key) => {\n    if (key instanceof Uint8Array)\n        return;\n    if (!isKeyLike(key)) {\n        throw new TypeError(invalidKeyInput(alg, key, ...types, 'Uint8Array'));\n    }\n    if (key.type !== 'secret') {\n        throw new TypeError(`${types.join(' or ')} instances for symmetric algorithms must be of type \"secret\"`);\n    }\n};\nconst asymmetricTypeCheck = (alg, key, usage) => {\n    if (!isKeyLike(key)) {\n        throw new TypeError(invalidKeyInput(alg, key, ...types));\n    }\n    if (key.type === 'secret') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithms must not be of type \"secret\"`);\n    }\n    if (usage === 'sign' && key.type === 'public') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm signing must be of type \"private\"`);\n    }\n    if (usage === 'decrypt' && key.type === 'public') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm decryption must be of type \"private\"`);\n    }\n    if (key.algorithm && usage === 'verify' && key.type === 'private') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm verifying must be of type \"public\"`);\n    }\n    if (key.algorithm && usage === 'encrypt' && key.type === 'private') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm encryption must be of type \"public\"`);\n    }\n};\nconst checkKeyType = (alg, key, usage) => {\n    const symmetric = alg.startsWith('HS') ||\n        alg === 'dir' ||\n        alg.startsWith('PBES2') ||\n        /^A\\d{3}(?:GCM)?KW$/.test(alg);\n    if (symmetric) {\n        symmetricTypeCheck(alg, key);\n    }\n    else {\n        asymmetricTypeCheck(alg, key, usage);\n    }\n};\nexport default checkKeyType;\n","import { JOSENotSupported } from '../util/errors.js';\nfunction validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {\n    if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) {\n        throw new Err('\"crit\" (Critical) Header Parameter MUST be integrity protected');\n    }\n    if (!protectedHeader || protectedHeader.crit === undefined) {\n        return new Set();\n    }\n    if (!Array.isArray(protectedHeader.crit) ||\n        protectedHeader.crit.length === 0 ||\n        protectedHeader.crit.some((input) => typeof input !== 'string' || input.length === 0)) {\n        throw new Err('\"crit\" (Critical) Header Parameter MUST be an array of non-empty strings when present');\n    }\n    let recognized;\n    if (recognizedOption !== undefined) {\n        recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);\n    }\n    else {\n        recognized = recognizedDefault;\n    }\n    for (const parameter of protectedHeader.crit) {\n        if (!recognized.has(parameter)) {\n            throw new JOSENotSupported(`Extension Header Parameter \"${parameter}\" is not recognized`);\n        }\n        if (joseHeader[parameter] === undefined) {\n            throw new Err(`Extension Header Parameter \"${parameter}\" is missing`);\n        }\n        else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) {\n            throw new Err(`Extension Header Parameter \"${parameter}\" MUST be integrity protected`);\n        }\n    }\n    return new Set(protectedHeader.crit);\n}\nexport default validateCrit;\n","const validateAlgorithms = (option, algorithms) => {\n    if (algorithms !== undefined &&\n        (!Array.isArray(algorithms) || algorithms.some((s) => typeof s !== 'string'))) {\n        throw new TypeError(`\"${option}\" option must be an array of strings`);\n    }\n    if (!algorithms) {\n        return undefined;\n    }\n    return new Set(algorithms);\n};\nexport default validateAlgorithms;\n","import { decode as base64url } from '../../runtime/base64url.js';\nimport verify from '../../runtime/verify.js';\nimport { JOSEAlgNotAllowed, JWSInvalid, JWSSignatureVerificationFailed } from '../../util/errors.js';\nimport { concat, encoder, decoder } from '../../lib/buffer_utils.js';\nimport isDisjoint from '../../lib/is_disjoint.js';\nimport isObject from '../../lib/is_object.js';\nimport checkKeyType from '../../lib/check_key_type.js';\nimport validateCrit from '../../lib/validate_crit.js';\nimport validateAlgorithms from '../../lib/validate_algorithms.js';\nexport async function flattenedVerify(jws, key, options) {\n    var _a;\n    if (!isObject(jws)) {\n        throw new JWSInvalid('Flattened JWS must be an object');\n    }\n    if (jws.protected === undefined && jws.header === undefined) {\n        throw new JWSInvalid('Flattened JWS must have either of the \"protected\" or \"header\" members');\n    }\n    if (jws.protected !== undefined && typeof jws.protected !== 'string') {\n        throw new JWSInvalid('JWS Protected Header incorrect type');\n    }\n    if (jws.payload === undefined) {\n        throw new JWSInvalid('JWS Payload missing');\n    }\n    if (typeof jws.signature !== 'string') {\n        throw new JWSInvalid('JWS Signature missing or incorrect type');\n    }\n    if (jws.header !== undefined && !isObject(jws.header)) {\n        throw new JWSInvalid('JWS Unprotected Header incorrect type');\n    }\n    let parsedProt = {};\n    if (jws.protected) {\n        try {\n            const protectedHeader = base64url(jws.protected);\n            parsedProt = JSON.parse(decoder.decode(protectedHeader));\n        }\n        catch (_b) {\n            throw new JWSInvalid('JWS Protected Header is invalid');\n        }\n    }\n    if (!isDisjoint(parsedProt, jws.header)) {\n        throw new JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');\n    }\n    const joseHeader = {\n        ...parsedProt,\n        ...jws.header,\n    };\n    const extensions = validateCrit(JWSInvalid, new Map([['b64', true]]), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);\n    let b64 = true;\n    if (extensions.has('b64')) {\n        b64 = parsedProt.b64;\n        if (typeof b64 !== 'boolean') {\n            throw new JWSInvalid('The \"b64\" (base64url-encode payload) Header Parameter must be a boolean');\n        }\n    }\n    const { alg } = joseHeader;\n    if (typeof alg !== 'string' || !alg) {\n        throw new JWSInvalid('JWS \"alg\" (Algorithm) Header Parameter missing or invalid');\n    }\n    const algorithms = options && validateAlgorithms('algorithms', options.algorithms);\n    if (algorithms && !algorithms.has(alg)) {\n        throw new JOSEAlgNotAllowed('\"alg\" (Algorithm) Header Parameter not allowed');\n    }\n    if (b64) {\n        if (typeof jws.payload !== 'string') {\n            throw new JWSInvalid('JWS Payload must be a string');\n        }\n    }\n    else if (typeof jws.payload !== 'string' && !(jws.payload instanceof Uint8Array)) {\n        throw new JWSInvalid('JWS Payload must be a string or an Uint8Array instance');\n    }\n    let resolvedKey = false;\n    if (typeof key === 'function') {\n        key = await key(parsedProt, jws);\n        resolvedKey = true;\n    }\n    checkKeyType(alg, key, 'verify');\n    const data = concat(encoder.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ''), encoder.encode('.'), typeof jws.payload === 'string' ? encoder.encode(jws.payload) : jws.payload);\n    const signature = base64url(jws.signature);\n    const verified = await verify(alg, key, signature, data);\n    if (!verified) {\n        throw new JWSSignatureVerificationFailed();\n    }\n    let payload;\n    if (b64) {\n        payload = base64url(jws.payload);\n    }\n    else if (typeof jws.payload === 'string') {\n        payload = encoder.encode(jws.payload);\n    }\n    else {\n        payload = jws.payload;\n    }\n    const result = { payload };\n    if (jws.protected !== undefined) {\n        result.protectedHeader = parsedProt;\n    }\n    if (jws.header !== undefined) {\n        result.unprotectedHeader = jws.header;\n    }\n    if (resolvedKey) {\n        return { ...result, key };\n    }\n    return result;\n}\n","import { flattenedVerify } from '../flattened/verify.js';\nimport { JWSInvalid } from '../../util/errors.js';\nimport { decoder } from '../../lib/buffer_utils.js';\nexport async function compactVerify(jws, key, options) {\n    if (jws instanceof Uint8Array) {\n        jws = decoder.decode(jws);\n    }\n    if (typeof jws !== 'string') {\n        throw new JWSInvalid('Compact JWS must be a string or Uint8Array');\n    }\n    const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split('.');\n    if (length !== 3) {\n        throw new JWSInvalid('Invalid Compact JWS');\n    }\n    const verified = await flattenedVerify({ payload, protected: protectedHeader, signature }, key, options);\n    const result = { payload: verified.payload, protectedHeader: verified.protectedHeader };\n    if (typeof key === 'function') {\n        return { ...result, key: verified.key };\n    }\n    return result;\n}\n","const minute = 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst week = day * 7;\nconst year = day * 365.25;\nconst REGEX = /^(\\d+|\\d+\\.\\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;\nexport default (str) => {\n    const matched = REGEX.exec(str);\n    if (!matched) {\n        throw new TypeError('Invalid time period format');\n    }\n    const value = parseFloat(matched[1]);\n    const unit = matched[2].toLowerCase();\n    switch (unit) {\n        case 'sec':\n        case 'secs':\n        case 'second':\n        case 'seconds':\n        case 's':\n            return Math.round(value);\n        case 'minute':\n        case 'minutes':\n        case 'min':\n        case 'mins':\n        case 'm':\n            return Math.round(value * minute);\n        case 'hour':\n        case 'hours':\n        case 'hr':\n        case 'hrs':\n        case 'h':\n            return Math.round(value * hour);\n        case 'day':\n        case 'days':\n        case 'd':\n            return Math.round(value * day);\n        case 'week':\n        case 'weeks':\n        case 'w':\n            return Math.round(value * week);\n        default:\n            return Math.round(value * year);\n    }\n};\n","import { JWTClaimValidationFailed, JWTExpired, JWTInvalid } from '../util/errors.js';\nimport { decoder } from './buffer_utils.js';\nimport epoch from './epoch.js';\nimport secs from './secs.js';\nimport isObject from './is_object.js';\nconst normalizeTyp = (value) => value.toLowerCase().replace(/^application\\//, '');\nconst checkAudiencePresence = (audPayload, audOption) => {\n    if (typeof audPayload === 'string') {\n        return audOption.includes(audPayload);\n    }\n    if (Array.isArray(audPayload)) {\n        return audOption.some(Set.prototype.has.bind(new Set(audPayload)));\n    }\n    return false;\n};\nexport default (protectedHeader, encodedPayload, options = {}) => {\n    const { typ } = options;\n    if (typ &&\n        (typeof protectedHeader.typ !== 'string' ||\n            normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {\n        throw new JWTClaimValidationFailed('unexpected \"typ\" JWT header value', 'typ', 'check_failed');\n    }\n    let payload;\n    try {\n        payload = JSON.parse(decoder.decode(encodedPayload));\n    }\n    catch (_a) {\n    }\n    if (!isObject(payload)) {\n        throw new JWTInvalid('JWT Claims Set must be a top-level JSON object');\n    }\n    const { issuer } = options;\n    if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {\n        throw new JWTClaimValidationFailed('unexpected \"iss\" claim value', 'iss', 'check_failed');\n    }\n    const { subject } = options;\n    if (subject && payload.sub !== subject) {\n        throw new JWTClaimValidationFailed('unexpected \"sub\" claim value', 'sub', 'check_failed');\n    }\n    const { audience } = options;\n    if (audience &&\n        !checkAudiencePresence(payload.aud, typeof audience === 'string' ? [audience] : audience)) {\n        throw new JWTClaimValidationFailed('unexpected \"aud\" claim value', 'aud', 'check_failed');\n    }\n    let tolerance;\n    switch (typeof options.clockTolerance) {\n        case 'string':\n            tolerance = secs(options.clockTolerance);\n            break;\n        case 'number':\n            tolerance = options.clockTolerance;\n            break;\n        case 'undefined':\n            tolerance = 0;\n            break;\n        default:\n            throw new TypeError('Invalid clockTolerance option type');\n    }\n    const { currentDate } = options;\n    const now = epoch(currentDate || new Date());\n    if ((payload.iat !== undefined || options.maxTokenAge) && typeof payload.iat !== 'number') {\n        throw new JWTClaimValidationFailed('\"iat\" claim must be a number', 'iat', 'invalid');\n    }\n    if (payload.nbf !== undefined) {\n        if (typeof payload.nbf !== 'number') {\n            throw new JWTClaimValidationFailed('\"nbf\" claim must be a number', 'nbf', 'invalid');\n        }\n        if (payload.nbf > now + tolerance) {\n            throw new JWTClaimValidationFailed('\"nbf\" claim timestamp check failed', 'nbf', 'check_failed');\n        }\n    }\n    if (payload.exp !== undefined) {\n        if (typeof payload.exp !== 'number') {\n            throw new JWTClaimValidationFailed('\"exp\" claim must be a number', 'exp', 'invalid');\n        }\n        if (payload.exp <= now - tolerance) {\n            throw new JWTExpired('\"exp\" claim timestamp check failed', 'exp', 'check_failed');\n        }\n    }\n    if (options.maxTokenAge) {\n        const age = now - payload.iat;\n        const max = typeof options.maxTokenAge === 'number' ? options.maxTokenAge : secs(options.maxTokenAge);\n        if (age - tolerance > max) {\n            throw new JWTExpired('\"iat\" claim timestamp check failed (too far in the past)', 'iat', 'check_failed');\n        }\n        if (age < 0 - tolerance) {\n            throw new JWTClaimValidationFailed('\"iat\" claim timestamp check failed (it should be in the past)', 'iat', 'check_failed');\n        }\n    }\n    return payload;\n};\n","export default (date) => Math.floor(date.getTime() / 1000);\n","import { compactVerify } from '../jws/compact/verify.js';\nimport jwtPayload from '../lib/jwt_claims_set.js';\nimport { JWTInvalid } from '../util/errors.js';\nexport async function jwtVerify(jwt, key, options) {\n    var _a;\n    const verified = await compactVerify(jwt, key, options);\n    if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes('b64')) && verified.protectedHeader.b64 === false) {\n        throw new JWTInvalid('JWTs MUST NOT use unencoded payload');\n    }\n    const payload = jwtPayload(verified.protectedHeader, verified.payload, options);\n    const result = { payload, protectedHeader: verified.protectedHeader };\n    if (typeof key === 'function') {\n        return { ...result, key: verified.key };\n    }\n    return result;\n}\n","import { isCloudflareWorkers } from './env.js';\nimport crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { decode as base64url } from './base64url.js';\nfunction subtleMapping(jwk) {\n    let algorithm;\n    let keyUsages;\n    switch (jwk.kty) {\n        case 'oct': {\n            switch (jwk.alg) {\n                case 'HS256':\n                case 'HS384':\n                case 'HS512':\n                    algorithm = { name: 'HMAC', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = ['sign', 'verify'];\n                    break;\n                case 'A128CBC-HS256':\n                case 'A192CBC-HS384':\n                case 'A256CBC-HS512':\n                    throw new JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);\n                case 'A128GCM':\n                case 'A192GCM':\n                case 'A256GCM':\n                case 'A128GCMKW':\n                case 'A192GCMKW':\n                case 'A256GCMKW':\n                    algorithm = { name: 'AES-GCM' };\n                    keyUsages = ['encrypt', 'decrypt'];\n                    break;\n                case 'A128KW':\n                case 'A192KW':\n                case 'A256KW':\n                    algorithm = { name: 'AES-KW' };\n                    keyUsages = ['wrapKey', 'unwrapKey'];\n                    break;\n                case 'PBES2-HS256+A128KW':\n                case 'PBES2-HS384+A192KW':\n                case 'PBES2-HS512+A256KW':\n                    algorithm = { name: 'PBKDF2' };\n                    keyUsages = ['deriveBits'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'RSA': {\n            switch (jwk.alg) {\n                case 'PS256':\n                case 'PS384':\n                case 'PS512':\n                    algorithm = { name: 'RSA-PSS', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'RS256':\n                case 'RS384':\n                case 'RS512':\n                    algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'RSA-OAEP':\n                case 'RSA-OAEP-256':\n                case 'RSA-OAEP-384':\n                case 'RSA-OAEP-512':\n                    algorithm = {\n                        name: 'RSA-OAEP',\n                        hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`,\n                    };\n                    keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'EC': {\n            switch (jwk.alg) {\n                case 'ES256':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ES384':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ES512':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ECDH-ES':\n                case 'ECDH-ES+A128KW':\n                case 'ECDH-ES+A192KW':\n                case 'ECDH-ES+A256KW':\n                    algorithm = { name: 'ECDH', namedCurve: jwk.crv };\n                    keyUsages = jwk.d ? ['deriveBits'] : [];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'OKP': {\n            switch (jwk.alg) {\n                case 'EdDSA':\n                    algorithm = { name: jwk.crv };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ECDH-ES':\n                case 'ECDH-ES+A128KW':\n                case 'ECDH-ES+A192KW':\n                case 'ECDH-ES+A256KW':\n                    algorithm = { name: jwk.crv };\n                    keyUsages = jwk.d ? ['deriveBits'] : [];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"kty\" (Key Type) Parameter value');\n    }\n    return { algorithm, keyUsages };\n}\nconst parse = async (jwk) => {\n    var _a, _b;\n    if (!jwk.alg) {\n        throw new TypeError('\"alg\" argument is required when \"jwk.alg\" is not present');\n    }\n    const { algorithm, keyUsages } = subtleMapping(jwk);\n    const rest = [\n        algorithm,\n        (_a = jwk.ext) !== null && _a !== void 0 ? _a : false,\n        (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages,\n    ];\n    if (algorithm.name === 'PBKDF2') {\n        return crypto.subtle.importKey('raw', base64url(jwk.k), ...rest);\n    }\n    const keyData = { ...jwk };\n    delete keyData.alg;\n    delete keyData.use;\n    try {\n        return await crypto.subtle.importKey('jwk', keyData, ...rest);\n    }\n    catch (err) {\n        if (algorithm.name === 'Ed25519' &&\n            (err === null || err === void 0 ? void 0 : err.name) === 'NotSupportedError' &&\n            isCloudflareWorkers()) {\n            rest[0] = { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };\n            return await crypto.subtle.importKey('jwk', keyData, ...rest);\n        }\n        throw err;\n    }\n};\nexport default parse;\n","import { decode as decodeBase64URL } from '../runtime/base64url.js';\nimport { fromSPKI, fromPKCS8, fromX509 } from '../runtime/asn1.js';\nimport asKeyObject from '../runtime/jwk_to_key.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport isObject from '../lib/is_object.js';\nexport async function importSPKI(spki, alg, options) {\n    if (typeof spki !== 'string' || spki.indexOf('-----BEGIN PUBLIC KEY-----') !== 0) {\n        throw new TypeError('\"spki\" must be SPKI formatted string');\n    }\n    return fromSPKI(spki, alg, options);\n}\nexport async function importX509(x509, alg, options) {\n    if (typeof x509 !== 'string' || x509.indexOf('-----BEGIN CERTIFICATE-----') !== 0) {\n        throw new TypeError('\"x509\" must be X.509 formatted string');\n    }\n    return fromX509(x509, alg, options);\n}\nexport async function importPKCS8(pkcs8, alg, options) {\n    if (typeof pkcs8 !== 'string' || pkcs8.indexOf('-----BEGIN PRIVATE KEY-----') !== 0) {\n        throw new TypeError('\"pkcs8\" must be PKCS#8 formatted string');\n    }\n    return fromPKCS8(pkcs8, alg, options);\n}\nexport async function importJWK(jwk, alg, octAsKeyObject) {\n    var _a;\n    if (!isObject(jwk)) {\n        throw new TypeError('JWK must be an object');\n    }\n    alg || (alg = jwk.alg);\n    switch (jwk.kty) {\n        case 'oct':\n            if (typeof jwk.k !== 'string' || !jwk.k) {\n                throw new TypeError('missing \"k\" (Key Value) Parameter value');\n            }\n            octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : (octAsKeyObject = jwk.ext !== true);\n            if (octAsKeyObject) {\n                return asKeyObject({ ...jwk, alg, ext: (_a = jwk.ext) !== null && _a !== void 0 ? _a : false });\n            }\n            return decodeBase64URL(jwk.k);\n        case 'RSA':\n            if (jwk.oth !== undefined) {\n                throw new JOSENotSupported('RSA JWK \"oth\" (Other Primes Info) Parameter value is not supported');\n            }\n        case 'EC':\n        case 'OKP':\n            return asKeyObject({ ...jwk, alg });\n        default:\n            throw new JOSENotSupported('Unsupported \"kty\" (Key Type) Parameter value');\n    }\n}\n","import { jwtVerify } from 'jose/dist/browser/jwt/verify'\r\nimport { importJWK } from 'jose/dist/browser/key/import'\r\n\r\nasync function verify(jwt) {\r\n    const rawResponse = await fetch(\"https://localhost:3000/api/auth/public-key\");\r\n    const jwk = await rawResponse.json();\r\n    const publicKey = await importJWK(jwk, \"ES256\");\r\n    const { payload, protectedHeader } = await jwtVerify(jwt, publicKey, {\r\n        issuer: \"app\",\r\n        audience: \"app\"\r\n    });\r\n    return payload;\r\n}\r\n\r\nwindow.verify = verify;\r\n"],"names":["$3f0b33e7ccc65ae0$export$2e2bcd8739ae039","crypto","$3f0b33e7ccc65ae0$export$600b5603bbac4c6","key","CryptoKey","$8c3dacf85b96b392$export$5486af06137bf21a","TextEncoder","$8c3dacf85b96b392$export$124c96e6ce37090b","TextDecoder","$8c3dacf85b96b392$export$ee1b3e54f0441b22","buffers","size","reduce","acc","length","buf","Uint8Array","i","forEach","buffer","set","$54a6e0e463467b0a$export$94fdf11bafc8de6b","encoded","binary","atob","bytes","charCodeAt","$54a6e0e463467b0a$export$2f872c0f2117be69","input","decode","replace","_a","TypeError","$5852df024b41aa91$export$7b262397cadac19f","WebSocketPair","navigator","userAgent","EdgeRuntime","$599ac781534a947a$export$f754d6850d76bf87","Error","code","constructor","message","super","this","name","captureStackTrace","call","$599ac781534a947a$export$f1e14efb908196e9","claim","reason","$599ac781534a947a$export$4b386bf852b7863d","$599ac781534a947a$export$d51fd7fedeccc338","arguments","$599ac781534a947a$export$19ddbcbf2016ab28","$599ac781534a947a$export$e838de724af3d116","$599ac781534a947a$export$936b39ada0bbfceb","Symbol","asyncIterator","$599ac781534a947a$export$c67a0218e7c50378","$fd9ff84d4ad74129$export$2e2bcd8739ae039","alg","algorithm","hash","slice","saltLength","namedCurve","$2c8180cef663e103$export$2e2bcd8739ae039","startsWith","modulusLength","$bd0b36fb17abf4f5$var$unusable","prop","$bd0b36fb17abf4f5$var$isAlgorithm","$bd0b36fb17abf4f5$var$getHashLength","parseInt","$bd0b36fb17abf4f5$var$checkUsage","usages","some","expected","includes","msg","last","pop","join","$bd0b36fb17abf4f5$export$39a36029eee6729","$bd0b36fb17abf4f5$var$getNamedCurve","$233e587bc0c17441$var$message","actual","types","$233e587bc0c17441$export$2e2bcd8739ae039","$233e587bc0c17441$export$e94f758d09bc1828","$002bdc4a0215a55c$export$2e2bcd8739ae039","$002bdc4a0215a55c$export$b14ad400b1d09e0f","$dd8265016b6a4c59$export$2e2bcd8739ae039","usage","subtle","importKey","$dbb3eb797cbe0e44$export$2e2bcd8739ae039","async","signature","data","cryptoKey","verify","$751ed1ebc64f8b96$export$2e2bcd8739ae039","headers","sources","filter","Boolean","header","parameters","Object","keys","parameter","has","add","Set","$319a04fbce04ffdb$export$2e2bcd8739ae039","value","prototype","toString","getPrototypeOf","proto","$8a5b1565e0dee973$export$2e2bcd8739ae039","test","type","$8a5b1565e0dee973$var$symmetricTypeCheck","$8a5b1565e0dee973$var$asymmetricTypeCheck","$0b572ece71b785f0$export$2e2bcd8739ae039","Err","recognizedDefault","recognizedOption","protectedHeader","joseHeader","undefined","crit","Array","isArray","recognized","Map","entries","get","$33550bd8f4719411$export$2e2bcd8739ae039","option","algorithms","s","$b1a47cad1ba554c8$export$b2614975507c40c9","jws","options","protected","payload","parsedProt","JSON","parse","_b","b64","resolvedKey","encode","result","unprotectedHeader","$6446add785626fa5$export$996150e72a8992e","split","verified","$e00eea37b383aa7e$var$day","$e00eea37b383aa7e$var$hour","$e00eea37b383aa7e$var$REGEX","$e00eea37b383aa7e$export$2e2bcd8739ae039","str","matched","exec","parseFloat","toLowerCase","Math","round","$e00eea37b383aa7e$var$minute","$b4d6c2e00c056d92$var$normalizeTyp","$b4d6c2e00c056d92$export$2e2bcd8739ae039","encodedPayload","typ","issuer","iss","subject","sub","audience","audPayload","aud","audOption","bind","tolerance","clockTolerance","currentDate","now","date","Date","floor","getTime","iat","maxTokenAge","nbf","exp","age","$059e3a140d30ed13$export$c878fd0f8381da51","jwt","$337343867c42a494$export$2e2bcd8739ae039","jwk","keyUsages","kty","d","crv","$337343867c42a494$var$subtleMapping","rest","ext","key_ops","k","keyData","use","err","$d3f3b992c534ed5a$export$2b70d37b4d0b888b","octAsKeyObject","oth","window","rawResponse","fetch","json","publicKey"],"version":3,"file":"index.2e888163.js.map"}