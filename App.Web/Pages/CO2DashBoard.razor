@page "/co2dashboard"
@using Microsoft.AspNetCore.SignalR.Client
@using global::App.Services.RealTimeUpdater.Common.models

<PageTitle>MatchWatcher</PageTitle>

<div class="d-flex mb-4">
    <h1 class="mb-0">CO2 dashboard</h1>
    <h5 class="ms-3 my-auto">
        @if (hubConnection?.State == HubConnectionState.Connected)
        {
            <i class="fa-solid fa-link text-success"></i>
        }
        else if (hubConnection?.State == HubConnectionState.Connecting || hubConnection?.State == HubConnectionState.Reconnecting)
        {
            <i class="fa-solid fa-link-slash text-muted"></i>
        }
        else
        {
            <i class="fa-solid fa-link-slash text-danger"></i>
        }
    </h5>
</div>

<div>
    <table class="table table-bordered">
        <thead>
        <tr>
            <th></th>
            <th>Country</th>
            <th>Location</th>
            <th>CO2 pr. kWh</th>
            <th>Wattage</th>
            <th>CO2 pr. hour</th>
            <th>Timestamp</th>
        </tr>
        </thead>
        <tbody>

        @if (emissions != null)
        {
            foreach (var item in emissions)
            {
                <tr>
                    <td class="text-center">
                        @if (item.Value.Location == lastUpdated)
                        {
                            <i class="fa-solid fa-circle text-success animate__pulse"></i>
                        }
                        else
                        {
                            <i class="fa-solid fa-circle text-muted"></i>
                        }
                    </td>
                    <td>@item.Value.CO2MeasurementModel?.Country</td>
                    <td>@item.Value.Location</td>
                    <td>@item.Value.CO2MeasurementModel?.CO2g_pr_kwh</td>
                    <td>@item.Value.Wattage kW</td>
                    <td>@(item.Value.CO2Emission)g</td>
                    <td>@item.Value.CO2MeasurementModel?.TimeStamp.ToString("yyyy MM-dd hh:mm:ss")</td>
                </tr>
            }
        }

        </tbody>
    </table>
</div>


@code {

    private HubConnection? hubConnection;

    private readonly Dictionary<string, EmissionModel> emissions = new();

    private string lastUpdated;

    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:3001/co2hub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<EmissionModel>("co2-reading", emissionModel =>
        {
            lastUpdated = emissionModel.Location;
            emissions[emissionModel.Location] = emissionModel;

            StateHasChanged();
        });

        hubConnection.Reconnecting += _ =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += _ =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        };

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}