@page "/login"

@implements IDisposable

@inject NavigationManager NavigationManager
@inject ISessionStore SessionStore

<div class="container">
    <div class="row">
        <div class="offset-md-2 col-md-4">
            <div class="card">
                <div class="card-body d-flex flex-column">
                    <h3 class="mx-auto mt-4 mb-5">Login</h3>

                    <EditForm Model="@LoginModel" OnSubmit="@OnSubmitLogin">
                        <div class="mb-3">
                            <label for="loginEmail" class="form-label">Email / Dataname</label>
                            <InputText type="email" class="form-control" id="loginEmail" @bind-Value="LoginModel.Username"/>
                        </div>
                        <div class="mb-3">
                            <label for="loginPassword" class="form-label">Password</label>
                            <InputText type="password" class="form-control" id="loginPassword" @bind-Value="LoginModel.Password"/>
                            <div id="loginPasswordHelp" class="form-text">We'll never share your password with anyone else.</div>
                        </div>
                        <button type="submit" class="btn btn-primary" disabled="@loginSubmitted" value="Save">Login</button>
                    </EditForm>
                </div>
            </div>

            

        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-body d-flex flex-column">
                    <h3 class="mx-auto mt-4 mb-5">Register</h3>

                    <EditForm Model="@RegisterModel" OnSubmit="@OnSubmitRegister">
                        <div class="mb-3">
                            <label for="registerFirstname" class="form-label">Firstname</label>
                            <InputText type="text" class="form-control" id="registerFirstname" @bind-Value="RegisterModel.Firstname" />
                        </div>

                        <div class="mb-3">
                            <label for="registerLastname" class="form-label">Lastname</label>
                            <InputText type="text" class="form-control" id="registerLastname" @bind-Value="RegisterModel.Lastname" />
                        </div>

                        <div class="mb-3">
                            <label for="registerEmail" class="form-label">Email</label>
                            <InputText type="email" class="form-control" id="registerEmail" @bind-Value="RegisterModel.Email" />
                        </div>

                        <div class="mb-3">
                            <label for="registerUsername" class="form-label">Username</label>
                            <InputText type="text" class="form-control" id="registerUsername" @bind-Value="RegisterModel.Username" />
                        </div>

                        <div class="mb-3">
                            <label for="registerPassword" class="form-label">Password</label>
                            <InputText type="password" class="form-control" id="registerPassword" @bind-Value="RegisterModel.Password" />
                            <div id="registerPasswordHelp" class="form-text">We'll never share your password with anyone else.</div>
                        </div>

                        <div class="mb-3">
                            <label for="registerConfirmPassword" class="form-label">Confirm Password</label>
                            <InputText type="password" class="form-control" id="registerConfirmPassword" @bind-Value="RegisterModel.ConfirmPassword" />
                        </div>

                        <button type="submit" class="btn btn-primary" disabled="@registerSubmitted" value="Save">Register</button>
                    </EditForm>

                </div>
            </div>
        </div>
    </div>
</div>


@code {

    readonly LoginFormModel LoginModel = new();

    bool loginSubmitted;

    async Task OnSubmitLogin(EditContext context)
    {
        loginSubmitted = true;
        ShouldRender();

        await SessionStore.Login(LoginModel.Username, LoginModel.Password);

        loginSubmitted = false;
        ShouldRender();
    }

    internal class LoginFormModel
    {
        public string Username { get; set; }

        public string Password { get; set; }
    }

}

@code {

    readonly RegisterFormModel RegisterModel = new();

    readonly bool registerSubmitted = false;

    async Task OnSubmitRegister(EditContext context)
    {
        loginSubmitted = true;
        ShouldRender();

        await SessionStore.Register(RegisterModel.Firstname, RegisterModel.Lastname, RegisterModel.Username, RegisterModel.Email, RegisterModel.Password, RegisterModel.ConfirmPassword);
    }

    internal class RegisterFormModel
    {
        public string Firstname { get; set; }

        public string Lastname { get; set; }

        public string Username { get; set; }

        public string Email { get; set; }

        public string Password { get; set; }

        public string ConfirmPassword { get; set; }
    }

}

@code {

    protected override void OnInitialized()
    {
        SessionStore.OnSessionChanged += SessionStoreOnOnSessionChanged;

        if (SessionStore.LoggedIn)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void SessionStoreOnOnSessionChanged()
    {
        if (SessionStore.LoggedIn)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    public void Dispose()
    {
        SessionStore.OnSessionChanged -= SessionStoreOnOnSessionChanged;
    }

}